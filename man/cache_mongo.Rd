% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mongo.R
\name{cache_mongo}
\alias{cache_mongo}
\title{A Caching object for MongoDB}
\description{
A Caching object for MongoDB

A Caching object for MongoDB
}
\details{
Create a cache backend with MongoDB.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{cache_mongo$new()}}
\item \href{#method-get}{\code{cache_mongo$get()}}
\item \href{#method-set}{\code{cache_mongo$set()}}
\item \href{#method-has_key}{\code{cache_mongo$has_key()}}
\item \href{#method-reset}{\code{cache_mongo$reset()}}
\item \href{#method-remove}{\code{cache_mongo$remove()}}
\item \href{#method-keys}{\code{cache_mongo$keys()}}
\item \href{#method-digest}{\code{cache_mongo$digest()}}
\item \href{#method-clone}{\code{cache_mongo$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Start a new mongo cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$new(
  db = "test",
  url = "mongodb://localhost",
  prefix = "fs",
  options = mongolite::ssl_options(),
  algo = "sha512",
  compress = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{db}}{name of database}

\item{\code{url}}{address of the mongodb server in mongo connection string URI format}

\item{\code{prefix}}{string to prefix the collection name}

\item{\code{options}}{additional connection options such as SSL keys/certs.}

\item{\code{algo}}{for \code{{memoise}} compatibility. The \code{digest()} algorithm.}

\item{\code{compress}}{for \code{{memoise}} compatibility. Should the data be compressed?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A cache_mongo object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Get a key from the cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$get(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Name of the key.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value stored using the \code{key}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\if{latex}{\out{\hypertarget{method-set}{}}}
\subsection{Method \code{set()}}{
Set a key in the cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$set(key, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Name of the key.}

\item{\code{value}}{Value to store}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Used for side effect
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_key"></a>}}
\if{latex}{\out{\hypertarget{method-has_key}{}}}
\subsection{Method \code{has_key()}}{
Does the cache contains a given key?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$has_key(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Name of the key.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE/FALSE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
Clear all the cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Used for side-effect
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
Remove a key/value pair
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$remove(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Name of the key.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Used for side-effect
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-keys"></a>}}
\if{latex}{\out{\hypertarget{method-keys}{}}}
\subsection{Method \code{keys()}}{
List all the keys in the cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of keys
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-digest"></a>}}
\if{latex}{\out{\hypertarget{method-digest}{}}}
\subsection{Method \code{digest()}}{
Function that runs an hash algo.
For compatibily with \code{{memoise}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$digest(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{the value to hash}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{cache_mongo$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
